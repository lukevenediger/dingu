test("Register a single module and fetch it.",function(){dingu.reset();dingu.module("ModuleA",function(){return{identify:function(){return 1}}});var n=dingu.get("ModuleA");equal(n.identify(),1)});test("Register two modules with one that depends on the other.",function(){dingu.reset();dingu.module("ModuleA",function(){return{identify:function(){return 1}}});dingu.module("ModuleB",function(n){return{identify:function(){return 2},myDependency:function(){return n.identify()}}});var t=dingu.get("ModuleA"),n=dingu.get("ModuleB");equal(n.identify(),2);equal(n.myDependency(),1)});test("Register three modules, with one depending on the other two.",function(){dingu.reset();dingu.module("ModuleA",function(){return{identify:function(){return 1}}});dingu.module("ModuleB",function(){return{identify:function(){return 2}}});dingu.module("ModuleC",function(n,t){return{identify:function(){return 3},myDependency:function(){return n.identify()+","+t.identify()}}});var n=dingu.get("ModuleC");equal(n.identify(),3);equal(n.myDependency(),"1,2")});test("Register a function that has a comment in the declaration",function(){dingu.reset();dingu.module("ModuleA",function(){return{me:function(){return"ModuleA"}}});var n=dingu.get("ModuleA");equal(n.me(),"ModuleA")});test("Register two functions that have comments in their declarations.",function(){var t,n;dingu.reset();dingu.module("ModuleA",function(){return{me:function(){return"ModuleA"}}});dingu.module("ModuleB",function(n){return{me:function(){return"ModuleB"},myDependency:function(){return n.me()}}});t=dingu.get("ModuleA");equal(t.me(),"ModuleA","ModuleA retrieved successfully.");n=dingu.get("ModuleB");equal(n.me(),"ModuleB");equal(n.myDependency(),"ModuleA")});test("Register a function that has a multi-line parameter declaration.",function(){dingu.reset();dingu.module("ModuleA",function(){return{me:function(){return"ModuleA"}}});dingu.module("ModuleB",function(){});dingu.module("ModuleC",function(){});var n=dingu.get("ModuleA");equal(n.me(),"ModuleA")});test("Register a function that has a multi-line parameter declaration with comments.",function(){dingu.reset();dingu.module("ModuleA",function(){return{me:function(){return"ModuleA"}}});dingu.module("ModuleB",function(){});dingu.module("ModuleC",function(){});var n=dingu.get("ModuleA");equal(n.me(),"ModuleA")});test("Register a singleton and check that it only instantiates once.",function(){var n,t;dingu.reset();dingu.singleton("SingletonA",function(){var n=0;return{identify:function(){return n+=1}}});n=dingu.get("SingletonA");equal(n.identify(),1);t=dingu.get("SingletonA");equal(t.identify(),2)});test("Throw an error if a circular dependency exists.",function(){dingu.reset();dingu.module("ModuleA",function(){});dingu.module("ModuleB",function(){});throws(function(){dingu.get("ModuleA")},/Calling ModuleA resolved a dependency that depends on this item. Chain: ModuleA->ModuleB->ModuleA/,"Circular dependency detected.")});test("Throw an error if an item is not found.",function(){dingu.reset();throws(function(){dingu.get("DoesNotExist")},/Item not found: DoesNotExist - was it registered/,"Item not found")});test("Retrieve a value from the registry.",function(){dingu.reset();dingu.value("foo",123);equal(dingu.get("foo"),123,"Value was stored and retrieved")});test("Pass a value into another module.",function(){dingu.reset();dingu.value("foo",123);dingu.module("ModuleA",["foo",function(n){return{hello:function(){return n+1}}}]);var n=dingu.get("ModuleA").hello();equal(n,124)});test("Module injection still works in minification mode",function(){dingu.reset();dingu.module("ModuleA",["ModuleB",function(n){return{doSomething:function(){return"Hi from ModuleA ("+n.doSomething()+")"}}}]);dingu.module("ModuleB",function(){return{doSomething:function(){return"Hi from ModuleB"}}});var n=dingu.get("ModuleA");equal(n.doSomething(),"Hi from ModuleA (Hi from ModuleB)")});test("Singleton supports minification",function(){var n,t;dingu.reset();dingu.singleton("SingletonA",["ModuleA",function(n){var t=0;return{identify:function(){return t+=1,t+" ("+n.doSomething()+")"}}}]);dingu.module("ModuleA",function(){return{doSomething:function(){return"ModuleA"}}});n=dingu.get("SingletonA");equal(n.identify(),"1 (ModuleA)");t=dingu.get("SingletonA");equal(t.identify(),"2 (ModuleA)")});
//# sourceMappingURL=tests.min.js.map